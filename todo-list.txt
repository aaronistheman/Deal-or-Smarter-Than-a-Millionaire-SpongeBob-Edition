Next:
-more decorated title screen
    --will probably have to implement image preloading
	--disclaim that SpongeBob or any of the involved game shows are
        at all my possession

Before release 0.1:
-make sure readme's number of questions is correct
-put release number on each file
-check readme

After release 0.1:
-applause sound effect
-look into that one error that always pops up in the console
(for index.html)
-consider making my own graphics for some things (e.g. briefcases)
    --could use GIMP, Microsoft Word, etc.
    --in this case, consider resource identifiers for the images
-with WebGL:
    --show opening of briefcase with WebGL
    --show visual briefcase when determining if user took good deal
    --show updating of money display with WebGL
    --use WebGL to present banker's offer with a rotating rectangle
    --if I decide not to use WebGL, alternative must be used
        (e.g. 2d drawing)
-make sure the game progresses smoothly in all parts (e.g. visually
    and auditorially)

After final release (whatever that turns out to be):
-YouTube video; put link in readme

Video:
-show each ending
    --lose one of first ten questions
    --take good deal
    --take bad deal
    --take case home
    --lose on million dollar question
    --win a million

Considerable:
-unit test to check sufficient subject variety
-adjust banker multiplier based on certain factors
    --e.g. grades of the answered questions
    --multiplier could be adjusted randomly within a range
-something unique in situations that would cause a really low bank offer
    --e.g. currently, having only 0.01 and 50 left leads to offer of $0
-putting something (e.g. game logo) in a blank banker offer bar
-improving the timing of the good offer sound (that is, show the money
    display during the "dink" part of the sound)
    --would require setTimeout() for the drawing of the offer
-hidden Saw music/visuals mode
-image preloading
    --sound preloading, too? (is this necessary or even a thing?)
-make way to disable questions about "modern" SpongeBob
    --e.g. pressing the down arrow three times in the title screen
        --announce how to do it in the YouTube video's ending
    --make sure the minimum question spread is met
    --for each question about "modern" SpongeBob, make a question
        of the same subject and grade about old SpongeBob
-having the order of the answers be randomized
    --could have object prototype Answer with member isCorrect
    --for Question constructor, the first answer given is made into
        the correct one; each is made into Answer object (out of the
        given AnswerData object)
-consider somehow changing the answer rectangle that the lifeline
    has chosen (but don't do this if it's too hard; it's my fault for
    not planning ahead enough); for terminology's sake, let's
    call such a rectangle a "favored" answer rectangle
-secret main menu key code to change the lifelines