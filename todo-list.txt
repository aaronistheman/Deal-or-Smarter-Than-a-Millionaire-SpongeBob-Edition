Next:
-allow picking of a helper
    --create and display helper icons
        --make GUI.HelperPanelContainer
            --make constructor do what it's supposed to
                --make member for things like "_button", "_icon", etc.
            --override the draw method
        --use "ChooseHelperMenuState.activatedComponent", or erase it;
        use the buttons' callbacks
        --if desired, make the icons' images' backgrounds' transparent
    --allow picking of helper at beginning
        --that is, store the data regarding this
    --allow repicking of a helper when appropriate
        --un-choose the old helper, and choose the new one
        --make a helper unable to be rechosen (remove it from
        the GUI container)
    --un-choose the current helper before million dollar question
-edit unit tests' style
    --change the style used in the names of the unit tests
        --e.g. change "type.method()" to "type.prototype.method()"
    --remove use of members that have underscore preceding their name
-remove game web font, or make it optional secretly
-apply some of what was learned in "Canvas Cookbook"; e.g.
    --give the quote bubble a border (using stroke)
-make separate canvas for help options
-implement peeking
-implement ask the audience
-implement phone a friend
-implement saving
-make sure:
    --SpongeBob explains the controls for using a source of help
    --sources of help can only be used once
    --sources of help can't be used on million dollar question
-put more to the ending? perhaps some graphical thing or words
    "The End"
    --EndGame class?
        --could pass the context (i.e. the type of ending) to get
            the appropriate reaction
    --play closing theme in all endings
    --individually examine each of the five endings: (e.g. quotes, music)
        --lose one of first ten questions
        --take deal
        --take case home
        --lose on million dollar question
        --win a million
-fix SpongeBob's directions about arrow keys and choosing question
    --make sure the introductory directions are all correct
-make SpongeBob do dramatic pauses before announcing every answer
    and question value
-more decorated title screen
    --will probably have to implement image preloading
	--disclaim that SpongeBob or any of the involved game shows are
        at all my possession

Before release 0.1:
-make sure trivial functions that are no longer needed and that were
 made for the purpose of testing have been erased in game-show-fusion.js
-make sure readme's number of questions is correct
-put release number on each file

After release 0.1:
-applause sound effect
-look into that one error that always pops up in the console
(for both index.html and unit-tests.html)
-consider making my own graphics for some things (e.g. briefcases)
    --could use GIMP, Microsoft Word, etc.
    --in this case, consider resource identifiers for the images
-with WebGL:
    --show opening of briefcase with WebGL
    --show visual briefcase when determining if user took good deal
    --show updating of money display with WebGL
    --use WebGL to present banker's offer with a rotating rectangle
    --if I decide not to use WebGL, alternative must be used
        (e.g. 2d drawing)
-having the order of the answers be randomized
    --could have object prototype Answer with member isCorrect
    --for Question constructor, the first answer given is made into
        the correct one; each is made into Answer object (out of the
        given AnswerData object)
-make way to disable questions about "modern" SpongeBob
    --e.g. pressing the down arrow three times in the title screen
        --announce how to do it in the YouTube video's ending
    --make sure the minimum question spread is met
    --for each question about "modern" SpongeBob, make a question
        of the same subject and grade about old SpongeBob
-make sure the game progresses smoothly in all parts (e.g. visually
    and auditorially)

After final release (whatever that turns out to be):
-YouTube video; put link in readme
    --mention the way to disable questions about "modern" SpongeBob

Considerable:
-making the game work on Safari 5 for Windows
-put truly private and priviledged members/functions in classes
-CSS classes for manipulating the color of the background of certain
    canvases
-use more web fonts
-low volume coughing if a certain answer is highlighted (as a
    reference to the fraud in Who Wants to be a Millionaire)
-allowing up/down keys to be used in choosing briefcase
    --ensure that SpongeBob explains this
-attaching the playing of sound effects to the class methods (e.g.
    BriefcaseDisplay::EmphasizePreviousCase())
    --this was already done with drawQuoteText()
-(if makes enough of a difference) applying isUnitTesting() when
    drawing question labels, so that they won't be drawn if
    unit testing; could apply to drawLabel functions
    --this will make the tests faster (if it matters)
-unit test to check sufficient subject variety
-replace use of ParameterError() with an alert and the throwing
    of an unhandled exception
    --update affected functions' contracts
-for functions that emphasize things, don't erase and redraw if same thing
    is emphasized
-more questions
-see if can align money amounts to the right of their bars
-adjust banker multiplier based on certain factors
    --e.g. grades of the answered questions
    --multiplier could be adjusted randomly within a range
-certain sound effects based on how much a question was worth
    --could be good or bad
    --would have to define "good" and "bad"
-something unique in situations that would cause a really low bank offer
    --e.g. currently, having only 0.01 and 50 left leads to offer of $0
-putting something (e.g. game logo) in a blank banker offer bar
-improving the timing of the good offer sound (that is, show the money
    display during the "dink" part of the sound)
    --would require setTimeout() for the drawing of the offer
-sprite sheets
-hidden Saw music/visuals mode
-image preloading
    --sound preloading, too? (is this necessary or even a thing?)
-apply the GUI components to the other menus
    --e.g. could have subtypes such as QuestionLabelButton
-function to define a truly private own property