Next:
-check information given to user:
    --look into having the host say the text of the answer that corresponds
    to the said letter (I think this should be easy, but I'll have to
    look into how well the answers fit, which I don't anticipate will
    be a problem)
        --say answer text when show:
            --helper's answer in Save
            --Patrick's answer in Phone a Friend
    --make sure SpongeBob explains the controls for using a source of help
-make a separate sound effect for question loss if can't be saved
-consider adding any helper strengths, questions, and question subjects
    --add subject "Pets" and add question about egg Roger?
-put more to the ending? perhaps some graphical thing or words
    "The End"
    --consider having handleWrongMillion...() end with the
    handleUserGoingHome...() function too
    --EndGame class?
        --could pass the context (i.e. the type of ending) to get
            the appropriate reaction, thus making it more manageable, too
            (look below for list of endings)
    --play closing theme in all endings
    --individually examine each of the five endings: (e.g. quotes, music)
        --lose one of first ten questions
        --take deal
        --take case home
        --lose on million dollar question
        --win a million
-more decorated title screen
    --will probably have to implement image preloading
	--disclaim that SpongeBob or any of the involved game shows are
        at all my possession

Before release 0.1:
-make sure readme's number of questions is correct
-put release number on each file

After release 0.1:
-applause sound effect
-look into that one error that always pops up in the console
(for index.html)
-consider making my own graphics for some things (e.g. briefcases)
    --could use GIMP, Microsoft Word, etc.
    --in this case, consider resource identifiers for the images
-with WebGL:
    --show opening of briefcase with WebGL
    --show visual briefcase when determining if user took good deal
    --show updating of money display with WebGL
    --use WebGL to present banker's offer with a rotating rectangle
    --if I decide not to use WebGL, alternative must be used
        (e.g. 2d drawing)
-make sure the game progresses smoothly in all parts (e.g. visually
    and auditorially)

After final release (whatever that turns out to be):
-YouTube video; put link in readme

Considerable:
-unit test to check sufficient subject variety
-adjust banker multiplier based on certain factors
    --e.g. grades of the answered questions
    --multiplier could be adjusted randomly within a range
-something unique in situations that would cause a really low bank offer
    --e.g. currently, having only 0.01 and 50 left leads to offer of $0
-putting something (e.g. game logo) in a blank banker offer bar
-improving the timing of the good offer sound (that is, show the money
    display during the "dink" part of the sound)
    --would require setTimeout() for the drawing of the offer
-hidden Saw music/visuals mode
-image preloading
    --sound preloading, too? (is this necessary or even a thing?)
-make way to disable questions about "modern" SpongeBob
    --e.g. pressing the down arrow three times in the title screen
        --announce how to do it in the YouTube video's ending
    --make sure the minimum question spread is met
    --for each question about "modern" SpongeBob, make a question
        of the same subject and grade about old SpongeBob
-having the order of the answers be randomized
    --could have object prototype Answer with member isCorrect
    --for Question constructor, the first answer given is made into
        the correct one; each is made into Answer object (out of the
        given AnswerData object)
-consider somehow changing the answer rectangle that the lifeline
    has chosen (but don't do this if it's too hard; it's my fault for
    not planning ahead enough); for terminology's sake, let's
    call such a rectangle a "favored" answer rectangle
-secret main menu key code to change the lifelines