Next:
-fix banker offer calculation
    --make MoneyAmount object
        --implement MoneyAmount in the rest of the code
        --remove putCommasInStringInteger()
	--or use Briefcase objects to keep track (and maybe pass an array of
		them to the banker)
    --make sure when the banker's offer is compared to your case's value,
        that there are no commas in either
        --the comparison thinks 69,000 > 250,000 and 50 > 26,000 and
            750 > 100,000
        --could have the Banker object store the offer and call
            updateOffer() when appropriate; then there could be
            Banker.getOfferAsFloat() and Banker.getOfferAsString()
        --make sure the big deal sound effect plays when appropriate
    --figure out why the deals always tend to be good; if they do
        --make sure commas are appropriately removed
        --perhaps don't solely use the average of the deals
-grey out the money amounts that are out of the game
    --see if can align money amounts to the right of their bars
    --could adjust the banker multiplier
-display the banker's offer along with the other monetary amounts
    --could easily convert the money display into this
-allow picking of a helper
-make separate canvas for help options
-implement peeking
-implement ask the audience
-implement phone a friend
-implement saving
-make sure:
    --SpongeBob explains the controls for using a source of help
    --sources of help can only be used once
    --sources of help can't be used on million dollar question
-put more to the ending? perhaps some graphical thing or words
    "The End"
    --EndGame class?
        --could pass the context (i.e. the type of ending) to get
            the appropriate reaction
    --play closing theme in all endings
    --individually examine each of the five endings: (e.g. quotes, music)
        --lose one of first ten questions
        --take deal
        --take case home
        --lose on million dollar question
        --win a million

At some point:
-applause sound effect
-make sure the game progresses smoothly in all parts (e.g. visually
    and auditorially)
-fix SpongeBob's directions about arrow keys and choosing question
    --make sure the introductory directions are all correct
-look into that one error that always pops up in the console
-make SpongeBob do dramatic pauses before announcing every answer
-with WebGL:
    --show opening of briefcase with WebGL
    --show visual briefcase when determining if user took good deal
    --show updating of money display with WebGL
    --use WebGL to present banker's offer with a rotating rectangle
    --if I decide not to use WebGL, alternative must be used
        (e.g. 2d drawing)
-more decorated title screen
	--disclaim that SpongeBob or any of the involved game shows are
	at all my possession
-consider making my own graphics for some things (e.g. briefcases)
    --could use GIMP, Microsoft Word, etc.
    --in this case, consider resource identifiers for the images

Before release 0.1:
-make sure trivial functions that are no longer needed and that were
 made for the purpose of testing have been erased in game-show-fusion.js
-erase commented out methods of MoneyDisplay (around lines 96-99)
-update readme; get number of questions
-put release number on each file

After release 0.1:
-Facebook/Twitter integration?
-YouTube video; put link in readme

Considerable:
-making the game work on Safari 5 for Windows
-put truly private and priviledged members/functions in classes
-CSS classes for manipulating the color of the background of certain
    canvases
-use more web fonts
-low volume coughing if a certain answer is highlighted (as a
    reference to the fraud in Who Wants to be a Millionaire)
-separating Questions into three classes: Questions, QuestionsLabelDisplay,
    QuestioningDisplay
-allowing up/down keys to be used in choosing briefcase
    --ensure that SpongeBob explains this
-attaching the playing of sound effects to the class methods (e.g.
    BriefcaseDisplay::EmphasizePreviousCase())
    --this was already done with drawQuoteText()
-moving quote bubble code into its own file
-(if can still make a difference) applying isUnitTesting() when
    drawing question labels, so that they won't be drawn if
    unit testing; could apply to drawLabel functions
-unit test to check sufficient subject variety
-replace use of ParameterError() with an alert and the throwing
    of an unhandled exception
    --update affected functions' contracts
-for functions that emphasize things, don't erase and redraw if same thing
    is emphasized
-make class MoneyData
    --this can be used to update both MoneyDisplay and
        BriefcaseDisplay
-other uses of canvas transition effects; or more creative use of them
-more questions